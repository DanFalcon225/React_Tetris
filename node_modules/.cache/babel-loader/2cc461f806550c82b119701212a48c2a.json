{"ast":null,"code":"import _slicedToArray from \"/Users/daniilssokolovs/react-smash/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\nexport var useStage = function useStage(player, resetPlayer) {\n  var _useState = useState(createStage()),\n      _useState2 = _slicedToArray(_useState, 2),\n      stage = _useState2[0],\n      setStage = _useState2[1];\n\n  useEffect(function () {\n    var updateStage = function updateStage(prevStage) {\n      // First flush the stage\n      var newStage = prevStage.map(function (row) {\n        return row.map(function (cell) {\n          return cell[1] === 'clear' ? [0, 'clear'] : cell;\n        });\n      }); // Then draw the tetromino\n\n      player.tetromino.forEach(function (row, y) {\n        row.forEach(function (value, x) {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [value, \"\".concat(player.collided ? 'merged' : 'clear')];\n          }\n        });\n      }); // Then check if we collided\n\n      if (player.collided) {\n        resetPlayer();\n      }\n\n      return newStage;\n    };\n\n    setStage(function (prev) {\n      return updateStage(prev);\n    });\n  }, [player, resetPlayer]);\n  return [stage, setStage];\n};","map":{"version":3,"names":["useState","useEffect","createStage","useStage","player","resetPlayer","stage","setStage","updateStage","prevStage","newStage","map","row","cell","tetromino","forEach","y","value","x","pos","collided","prev"],"sources":["/Users/daniilssokolovs/react-smash/src/hooks/useStage.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\n\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n\n  useEffect(() => {\n    const updateStage = prevStage => {\n      // First flush the stage\n      const newStage = prevStage.map(row =>\n        row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)),\n      );\n\n      // Then draw the tetromino\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [\n              value,\n              `${player.collided ? 'merged' : 'clear'}`,\n            ];\n          }\n        });\n      });\n      // Then check if we collided\n      if (player.collided) {\n        resetPlayer();\n      }\n\n      return newStage;\n    };\n\n    setStage(prev => updateStage(prev));\n  }, [player, resetPlayer]);\n\n  return [stage, setStage];\n};\n"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,MAAD,EAASC,WAAT,EAAyB;EAAA,gBACrBL,QAAQ,CAACE,WAAW,EAAZ,CADa;EAAA;EAAA,IACxCI,KADwC;EAAA,IACjCC,QADiC;;EAG/CN,SAAS,CAAC,YAAM;IACd,IAAMO,WAAW,GAAG,SAAdA,WAAc,CAAAC,SAAS,EAAI;MAC/B;MACA,IAAMC,QAAQ,GAAGD,SAAS,CAACE,GAAV,CAAc,UAAAC,GAAG;QAAA,OAChCA,GAAG,CAACD,GAAJ,CAAQ,UAAAE,IAAI;UAAA,OAAKA,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAZ,GAAsB,CAAC,CAAD,EAAI,OAAJ,CAAtB,GAAqCA,IAA1C;QAAA,CAAZ,CADgC;MAAA,CAAjB,CAAjB,CAF+B,CAM/B;;MACAT,MAAM,CAACU,SAAP,CAAiBC,OAAjB,CAAyB,UAACH,GAAD,EAAMI,CAAN,EAAY;QACnCJ,GAAG,CAACG,OAAJ,CAAY,UAACE,KAAD,EAAQC,CAAR,EAAc;UACxB,IAAID,KAAK,KAAK,CAAd,EAAiB;YACfP,QAAQ,CAACM,CAAC,GAAGZ,MAAM,CAACe,GAAP,CAAWH,CAAhB,CAAR,CAA2BE,CAAC,GAAGd,MAAM,CAACe,GAAP,CAAWD,CAA1C,IAA+C,CAC7CD,KAD6C,YAE1Cb,MAAM,CAACgB,QAAP,GAAkB,QAAlB,GAA6B,OAFa,EAA/C;UAID;QACF,CAPD;MAQD,CATD,EAP+B,CAiB/B;;MACA,IAAIhB,MAAM,CAACgB,QAAX,EAAqB;QACnBf,WAAW;MACZ;;MAED,OAAOK,QAAP;IACD,CAvBD;;IAyBAH,QAAQ,CAAC,UAAAc,IAAI;MAAA,OAAIb,WAAW,CAACa,IAAD,CAAf;IAAA,CAAL,CAAR;EACD,CA3BQ,EA2BN,CAACjB,MAAD,EAASC,WAAT,CA3BM,CAAT;EA6BA,OAAO,CAACC,KAAD,EAAQC,QAAR,CAAP;AACD,CAjCM"},"metadata":{},"sourceType":"module"}