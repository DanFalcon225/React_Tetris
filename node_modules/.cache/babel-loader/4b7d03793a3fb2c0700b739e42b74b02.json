{"ast":null,"code":"import _objectSpread from \"/Users/daniilssokolovs/react-tetris/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/daniilssokolovs/react-tetris/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useCallback } from 'react';\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH } from '../gameHelpers'; //Using ES6 structuring below code has been simplified to 1 line\n//without ES6\n//const playerState = useState();\n//const player = playerState[0]\n//const setPlayer = playerState[1]\n//with ES6\n//const [player, setPlayer] = useState();\n\nexport var usePlayer = function usePlayer() {\n  var _useState = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: TETROMINOS[0].shape,\n    collided: false\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      player = _useState2[0],\n      setPlayer = _useState2[1];\n\n  var rotate = function rotate(matrix, dir) {\n    // Transform rows to columns - transpose\n    var rotatedTetro = matrix.map(function (_, index) {\n      return matrix.map(function (col) {\n        return col[index];\n      });\n    });\n  };\n\n  var playerRotate = function playerRotate(stage, dir) {}; //spread previouse state\n\n\n  var updatePlayerPos = function updatePlayerPos(_ref) {\n    var x = _ref.x,\n        y = _ref.y,\n        collided = _ref.collided;\n    setPlayer(function (prev) {\n      return _objectSpread({}, prev, {\n        pos: {\n          x: prev.pos.x += x,\n          y: prev.pos.y += y\n        },\n        collided: collided\n      });\n    });\n  }; //call random tetromino\n\n\n  var resetPlayer = useCallback(function () {\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: randomTetromino().shape,\n      collided: false\n    });\n  }, []);\n  return [player, updatePlayerPos, resetPlayer];\n};","map":{"version":3,"names":["useState","useCallback","TETROMINOS","randomTetromino","STAGE_WIDTH","usePlayer","pos","x","y","tetromino","shape","collided","player","setPlayer","rotate","matrix","dir","rotatedTetro","map","_","index","col","playerRotate","stage","updatePlayerPos","prev","resetPlayer"],"sources":["/Users/daniilssokolovs/react-tetris/src/hooks/usePlayer.js"],"sourcesContent":["import { useState, useCallback } from 'react';\n\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH } from '../gameHelpers';\n\n\n//Using ES6 structuring below code has been simplified to 1 line\n    //without ES6\n    //const playerState = useState();\n    //const player = playerState[0]\n    //const setPlayer = playerState[1]\n    //with ES6\n    //const [player, setPlayer] = useState();\n\nexport const usePlayer = () => {\n    const [player, setPlayer] = useState({\n        pos: {x: 0, y: 0},\n        tetromino: TETROMINOS[0].shape,\n        collided: false,\n    });\n\n    const rotate = (matrix, dir) => {\n        // Transform rows to columns - transpose\n        const rotatedTetro = matrix.map((_, index) => \n            matrix.map(col => col[index]),\n        );\n\n    };\n\n    const playerRotate = (stage, dir) => {\n\n    }\n\n    //spread previouse state\n    const updatePlayerPos = ({ x, y, collided }) => {\n        setPlayer(prev => ({\n            ...prev,\n            pos: { x: (prev.pos.x += x), y: (prev.pos.y += y)},\n            collided,\n        }))\n    }\n\n    //call random tetromino\n    const resetPlayer = useCallback(() => {\n        setPlayer({\n            pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n            tetromino: randomTetromino().shape,\n            collided: false,\n        })\n    }, [])\n\n    return [player, updatePlayerPos, resetPlayer];\n}"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AAEA,SAASC,UAAT,EAAqBC,eAArB,QAA4C,eAA5C;AACA,SAASC,WAAT,QAA4B,gBAA5B,C,CAGA;AACI;AACA;AACA;AACA;AACA;AACA;;AAEJ,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;EAAA,gBACCL,QAAQ,CAAC;IACjCM,GAAG,EAAE;MAACC,CAAC,EAAE,CAAJ;MAAOC,CAAC,EAAE;IAAV,CAD4B;IAEjCC,SAAS,EAAEP,UAAU,CAAC,CAAD,CAAV,CAAcQ,KAFQ;IAGjCC,QAAQ,EAAE;EAHuB,CAAD,CADT;EAAA;EAAA,IACpBC,MADoB;EAAA,IACZC,SADY;;EAO3B,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,MAAD,EAASC,GAAT,EAAiB;IAC5B;IACA,IAAMC,YAAY,GAAGF,MAAM,CAACG,GAAP,CAAW,UAACC,CAAD,EAAIC,KAAJ;MAAA,OAC5BL,MAAM,CAACG,GAAP,CAAW,UAAAG,GAAG;QAAA,OAAIA,GAAG,CAACD,KAAD,CAAP;MAAA,CAAd,CAD4B;IAAA,CAAX,CAArB;EAIH,CAND;;EAQA,IAAME,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAQP,GAAR,EAAgB,CAEpC,CAFD,CAf2B,CAmB3B;;;EACA,IAAMQ,eAAe,GAAG,SAAlBA,eAAkB,OAAwB;IAAA,IAArBjB,CAAqB,QAArBA,CAAqB;IAAA,IAAlBC,CAAkB,QAAlBA,CAAkB;IAAA,IAAfG,QAAe,QAAfA,QAAe;IAC5CE,SAAS,CAAC,UAAAY,IAAI;MAAA,yBACPA,IADO;QAEVnB,GAAG,EAAE;UAAEC,CAAC,EAAGkB,IAAI,CAACnB,GAAL,CAASC,CAAT,IAAcA,CAApB;UAAwBC,CAAC,EAAGiB,IAAI,CAACnB,GAAL,CAASE,CAAT,IAAcA;QAA1C,CAFK;QAGVG,QAAQ,EAARA;MAHU;IAAA,CAAL,CAAT;EAKH,CAND,CApB2B,CA4B3B;;;EACA,IAAMe,WAAW,GAAGzB,WAAW,CAAC,YAAM;IAClCY,SAAS,CAAC;MACNP,GAAG,EAAE;QAAEC,CAAC,EAAEH,WAAW,GAAG,CAAd,GAAkB,CAAvB;QAA0BI,CAAC,EAAE;MAA7B,CADC;MAENC,SAAS,EAAEN,eAAe,GAAGO,KAFvB;MAGNC,QAAQ,EAAE;IAHJ,CAAD,CAAT;EAKH,CAN8B,EAM5B,EAN4B,CAA/B;EAQA,OAAO,CAACC,MAAD,EAASY,eAAT,EAA0BE,WAA1B,CAAP;AACH,CAtCM"},"metadata":{},"sourceType":"module"}