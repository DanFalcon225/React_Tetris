{"ast":null,"code":"import _slicedToArray from \"/Users/daniilssokolovs/react-tetris/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n//By using useEffect Hook, you tell React that your component needs to do something after render.\nimport { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\nexport var useStage = function useStage(player, resetPlayer) {\n  var _useState = useState(createStage()),\n      _useState2 = _slicedToArray(_useState, 2),\n      stage = _useState2[0],\n      setStage = _useState2[1];\n\n  useEffect(function () {\n    var updateStage = function updateStage(prevStage) {\n      //1st flush the stage. Check whether the tetromino has collided in the cell or not\n      var newStage = prevStage.map(function (row) {\n        return row.map(function (cell) {\n          return cell[1] === 'clear' ? [0, 'clear'] : cell;\n        });\n      }); //Then draw the tetromino\n\n      player.tetromino.forEach(function (row, y) {\n        row.forEach(function (value, x) {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [value, \"\".concat(player.collided ? 'merged' : 'clear')];\n          }\n        });\n      }); // Then check if we collided\n\n      if (player.collided) {\n        resetPlayer();\n      }\n\n      return newStage;\n    };\n\n    setStage(function (prev) {\n      return updateStage(prev);\n    });\n  }, [player, resetPlayer]);\n  return [stage, setStage];\n};","map":{"version":3,"names":["useState","useEffect","createStage","useStage","player","resetPlayer","stage","setStage","updateStage","prevStage","newStage","map","row","cell","tetromino","forEach","y","value","x","pos","collided","prev"],"sources":["/Users/daniilssokolovs/react-tetris/src/hooks/useStage.js"],"sourcesContent":["//By using useEffect Hook, you tell React that your component needs to do something after render.\nimport { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\n\nexport const useStage = (player, resetPlayer) => {\n    const [stage, setStage] = useState(createStage());\n\n    useEffect(() => {\n        const updateStage = prevStage => {\n            //1st flush the stage. Check whether the tetromino has collided in the cell or not\n            const newStage = prevStage.map(row =>\n                row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)),\n            );\n\n            //Then draw the tetromino\n            player.tetromino.forEach((row, y) => {\n                row.forEach((value, x) => {\n                    if(value !== 0) {\n                            newStage[y + player.pos.y][x + player.pos.x] = [\n                                value,`${player.collided ? 'merged' : 'clear'}`,\n                        ];\n                    }\n                });\n            });\n            // Then check if we collided\n            if (player.collided) {\n                resetPlayer();\n            }\n\n            return newStage;\n        };\n\n        setStage(prev => updateStage(prev));\n    }, [player, resetPlayer]);\n\n    return [stage, setStage];\n};"],"mappings":";AAAA;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,MAAD,EAASC,WAAT,EAAyB;EAAA,gBACnBL,QAAQ,CAACE,WAAW,EAAZ,CADW;EAAA;EAAA,IACtCI,KADsC;EAAA,IAC/BC,QAD+B;;EAG7CN,SAAS,CAAC,YAAM;IACZ,IAAMO,WAAW,GAAG,SAAdA,WAAc,CAAAC,SAAS,EAAI;MAC7B;MACA,IAAMC,QAAQ,GAAGD,SAAS,CAACE,GAAV,CAAc,UAAAC,GAAG;QAAA,OAC9BA,GAAG,CAACD,GAAJ,CAAQ,UAAAE,IAAI;UAAA,OAAKA,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAZ,GAAsB,CAAC,CAAD,EAAI,OAAJ,CAAtB,GAAqCA,IAA1C;QAAA,CAAZ,CAD8B;MAAA,CAAjB,CAAjB,CAF6B,CAM7B;;MACAT,MAAM,CAACU,SAAP,CAAiBC,OAAjB,CAAyB,UAACH,GAAD,EAAMI,CAAN,EAAY;QACjCJ,GAAG,CAACG,OAAJ,CAAY,UAACE,KAAD,EAAQC,CAAR,EAAc;UACtB,IAAGD,KAAK,KAAK,CAAb,EAAgB;YACRP,QAAQ,CAACM,CAAC,GAAGZ,MAAM,CAACe,GAAP,CAAWH,CAAhB,CAAR,CAA2BE,CAAC,GAAGd,MAAM,CAACe,GAAP,CAAWD,CAA1C,IAA+C,CAC3CD,KAD2C,YAClCb,MAAM,CAACgB,QAAP,GAAkB,QAAlB,GAA6B,OADK,EAA/C;UAGP;QACJ,CAND;MAOH,CARD,EAP6B,CAgB7B;;MACA,IAAIhB,MAAM,CAACgB,QAAX,EAAqB;QACjBf,WAAW;MACd;;MAED,OAAOK,QAAP;IACH,CAtBD;;IAwBAH,QAAQ,CAAC,UAAAc,IAAI;MAAA,OAAIb,WAAW,CAACa,IAAD,CAAf;IAAA,CAAL,CAAR;EACH,CA1BQ,EA0BN,CAACjB,MAAD,EAASC,WAAT,CA1BM,CAAT;EA4BA,OAAO,CAACC,KAAD,EAAQC,QAAR,CAAP;AACH,CAhCM"},"metadata":{},"sourceType":"module"}