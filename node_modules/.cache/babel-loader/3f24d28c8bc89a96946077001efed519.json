{"ast":null,"code":"export var STAGE_WIDTH = 12;\nexport var STAGE_HEIGHT = 20; //Multi dimentional array which is represents a play canvas. For every row, funcation creates a new array with the cells\n//which is filled by 3rd array which will contain actual tetris objects\n\nexport var createStage = function createStage() {\n  return Array.from(Array(STAGE_HEIGHT), function () {\n    return new Array(STAGE_WIDTH).fill([0, 'clear']);\n  });\n}; //renamed x and y to moveX and move Y respectively this is done for further loops\n\nexport var checkCollision = function checkCollision(player, stage, _ref) {\n  var moveX = _ref.x,\n      moveY = _ref.y;\n\n  for (var y = 0; y < player.tetromino.length; y += 1) {\n    for (var x = 0; x < player.tetromino[y].length; x += 1) {\n      // 1. Check that we are on an actual tetromino cell\n      if (player.tetromino[y][x] !== 0) {\n        if ( //2. Check that our move is inside the game areas height - (y)\n        //We should not go through the bottom of the play area\n        // chained short circuit in use\n        !stage[y + player.pos.y + moveY] || //3. Check that our move is inside the game areas width - (x)\n        !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] || //4. Check that the cell we are moving to is not set to clear\n        //If it is clear we are not colliding\n        stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== 'clear') {\n          return true;\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["STAGE_WIDTH","STAGE_HEIGHT","createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos"],"sources":["/Users/daniilssokolovs/react-smash/src/gameHelpers.js"],"sourcesContent":["export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\n\n//Multi dimentional array which is represents a play canvas. For every row, funcation creates a new array with the cells\n//which is filled by 3rd array which will contain actual tetris objects\nexport const createStage = () =>\n    Array.from(Array(STAGE_HEIGHT), () =>\n        new Array(STAGE_WIDTH).fill([0, 'clear'])\n    );\n//renamed x and y to moveX and move Y respectively this is done for further loops\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\n    for (let y = 0; y < player.tetromino.length; y += 1) {\n        for (let x = 0; x < player.tetromino[y].length; x += 1) {\n            // 1. Check that we are on an actual tetromino cell\n            if (player.tetromino[y][x] !== 0) {\n                if(\n                //2. Check that our move is inside the game areas height - (y)\n                //We should not go through the bottom of the play area\n                // chained short circuit in use\n                !stage[y + player.pos.y + moveY] ||   \n                //3. Check that our move is inside the game areas width - (x)\n                !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\n                //4. Check that the cell we are moving to is not set to clear\n                //If it is clear we are not colliding\n                stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== \n                    'clear'\n                ) {\n                   return true;     \n                }\n            }\n        }\n    }\n};"],"mappings":"AAAA,OAAO,IAAMA,WAAW,GAAG,EAApB;AACP,OAAO,IAAMC,YAAY,GAAG,EAArB,C,CAGP;AACA;;AACA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc;EAAA,OACvBC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACF,YAAD,CAAhB,EAAgC;IAAA,OAC5B,IAAIE,KAAJ,CAAUH,WAAV,EAAuBK,IAAvB,CAA4B,CAAC,CAAD,EAAI,OAAJ,CAA5B,CAD4B;EAAA,CAAhC,CADuB;AAAA,CAApB,C,CAIP;;AACA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,MAAD,EAASC,KAAT,QAA2C;EAAA,IAAtBC,KAAsB,QAAzBC,CAAyB;EAAA,IAAZC,KAAY,QAAfC,CAAe;;EACrE,KAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAAM,CAACM,SAAP,CAAiBC,MAArC,EAA6CF,CAAC,IAAI,CAAlD,EAAqD;IACjD,KAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACM,SAAP,CAAiBD,CAAjB,EAAoBE,MAAxC,EAAgDJ,CAAC,IAAI,CAArD,EAAwD;MACpD;MACA,IAAIH,MAAM,CAACM,SAAP,CAAiBD,CAAjB,EAAoBF,CAApB,MAA2B,CAA/B,EAAkC;QAC9B,KACA;QACA;QACA;QACA,CAACF,KAAK,CAACI,CAAC,GAAGL,MAAM,CAACQ,GAAP,CAAWH,CAAf,GAAmBD,KAApB,CAAN,IACA;QACA,CAACH,KAAK,CAACI,CAAC,GAAGL,MAAM,CAACQ,GAAP,CAAWH,CAAf,GAAmBD,KAApB,CAAL,CAAgCD,CAAC,GAAGH,MAAM,CAACQ,GAAP,CAAWL,CAAf,GAAmBD,KAAnD,CAFD,IAGA;QACA;QACAD,KAAK,CAACI,CAAC,GAAGL,MAAM,CAACQ,GAAP,CAAWH,CAAf,GAAmBD,KAApB,CAAL,CAAgCD,CAAC,GAAGH,MAAM,CAACQ,GAAP,CAAWL,CAAf,GAAmBD,KAAnD,EAA0D,CAA1D,MACI,OAVJ,EAWE;UACC,OAAO,IAAP;QACF;MACJ;IACJ;EACJ;AACJ,CAtBM"},"metadata":{},"sourceType":"module"}