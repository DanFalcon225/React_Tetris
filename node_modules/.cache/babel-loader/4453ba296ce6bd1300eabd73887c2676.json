{"ast":null,"code":"import _slicedToArray from \"/Users/daniilssokolovs/react-tetris/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect, useCallback } from 'react';\nexport var useGameStatus = function useGameStatus(rowsCleared) {\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      score = _useState2[0],\n      setScore = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      rows = _useState4[0],\n      setRows = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      level = _useState6[0],\n      setLevel = _useState6[1]; //tetris scores\n\n\n  var linePoints = [40, 100, 300, 1200];\n  var calcScore = useCallback(function () {\n    //Check whether we have score\n    if (rowsCleared > 0) {\n      // The original tetris score calculation\n      //since array values starts with 0 we needs to add or subtract 1\n      setScore(function (prev) {\n        return prev + linePoints[rowsCleared - 1] * (level + 1);\n      });\n      setRows(function (prev) {\n        return prev + rowsCleared;\n      });\n    }\n  }, [level, linePoints, rowsCleared]);\n  useEffect(function () {\n    calcScore();\n  }, [calcScore, rowsCleared, score]);\n  return [score, setScore, rows, setRows, level, setLevel];\n};","map":{"version":3,"names":["useState","useEffect","useCallback","useGameStatus","rowsCleared","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","prev"],"sources":["/Users/daniilssokolovs/react-tetris/src/hooks/useGameStatus.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\nexport const useGameStatus = rowsCleared => {\n    const [score, setScore] = useState(0);\n    const [rows, setRows] = useState(0);\n    const [level, setLevel] = useState(0);\n\n    //tetris scores\n    const linePoints = [40, 100, 300, 1200];\n\n    const calcScore = useCallback(() => {\n        //Check whether we have score\n        if(rowsCleared > 0) {\n            // The original tetris score calculation\n            //since array values starts with 0 we needs to add or subtract 1\n            setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\n            setRows(prev => prev + rowsCleared);\n        }\n    }, [level, linePoints, rowsCleared]);\n\n    useEffect(() => {\n        calcScore();\n\n    }, [calcScore, rowsCleared, score]);\n\n    return [score, setScore, rows, setRows, level, setLevel];\n};"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,WAAW,EAAI;EAAA,gBACdJ,QAAQ,CAAC,CAAD,CADM;EAAA;EAAA,IACjCK,KADiC;EAAA,IAC1BC,QAD0B;;EAAA,iBAEhBN,QAAQ,CAAC,CAAD,CAFQ;EAAA;EAAA,IAEjCO,IAFiC;EAAA,IAE3BC,OAF2B;;EAAA,iBAGdR,QAAQ,CAAC,CAAD,CAHM;EAAA;EAAA,IAGjCS,KAHiC;EAAA,IAG1BC,QAH0B,kBAKxC;;;EACA,IAAMC,UAAU,GAAG,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,EAAe,IAAf,CAAnB;EAEA,IAAMC,SAAS,GAAGV,WAAW,CAAC,YAAM;IAChC;IACA,IAAGE,WAAW,GAAG,CAAjB,EAAoB;MAChB;MACA;MACAE,QAAQ,CAAC,UAAAO,IAAI;QAAA,OAAIA,IAAI,GAAGF,UAAU,CAACP,WAAW,GAAG,CAAf,CAAV,IAA+BK,KAAK,GAAG,CAAvC,CAAX;MAAA,CAAL,CAAR;MACAD,OAAO,CAAC,UAAAK,IAAI;QAAA,OAAIA,IAAI,GAAGT,WAAX;MAAA,CAAL,CAAP;IACH;EACJ,CAR4B,EAQ1B,CAACK,KAAD,EAAQE,UAAR,EAAoBP,WAApB,CAR0B,CAA7B;EAUAH,SAAS,CAAC,YAAM;IACZW,SAAS;EAEZ,CAHQ,EAGN,CAACA,SAAD,EAAYR,WAAZ,EAAyBC,KAAzB,CAHM,CAAT;EAKA,OAAO,CAACA,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,EAAwBC,OAAxB,EAAiCC,KAAjC,EAAwCC,QAAxC,CAAP;AACH,CAxBM"},"metadata":{},"sourceType":"module"}