{"ast":null,"code":"import _objectSpread from \"/Users/daniilssokolovs/react-smash/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/daniilssokolovs/react-smash/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useCallback } from 'react';\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH } from '../gameHelpers';\nexport var usePlayer = function usePlayer() {\n  var _useState = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: TETROMINOS[0].shape,\n    collided: false\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      player = _useState2[0],\n      setPlayer = _useState2[1];\n\n  var updatePlayerPos = function updatePlayerPos(_ref) {\n    var x = _ref.x,\n        y = _ref.y,\n        collided = _ref.collided;\n    setPlayer(function (prev) {\n      return _objectSpread({}, prev, {\n        pos: {\n          x: prev.pos.x += x,\n          y: prev.pos.y += y\n        },\n        collided: collided\n      });\n    });\n  };\n\n  var resetPlayer = useCallback(function () {\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: randomTetromino().shape,\n      collided: false\n    });\n  }, []);\n  return [player, updatePlayerPos, resetPlayer];\n};","map":{"version":3,"names":["useState","useCallback","TETROMINOS","randomTetromino","STAGE_WIDTH","usePlayer","pos","x","y","tetromino","shape","collided","player","setPlayer","updatePlayerPos","prev","resetPlayer"],"sources":["/Users/daniilssokolovs/react-smash/src/hooks/usePlayer.js"],"sourcesContent":["import { useState, useCallback } from 'react';\n\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH } from '../gameHelpers';\n\nexport const usePlayer = () => {\n  const [player, setPlayer] = useState({\n    pos: { x: 0, y: 0 },\n    tetromino: TETROMINOS[0].shape,\n    collided: false,\n  });\n\n  const updatePlayerPos = ({ x, y, collided }) => {\n    setPlayer(prev => ({\n      ...prev,\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y)},\n      collided,\n    }))\n  }\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n      tetromino: randomTetromino().shape,\n      collided: false,\n    })\n  }, [])\n\n  return [player, updatePlayerPos, resetPlayer];\n}"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AAEA,SAASC,UAAT,EAAqBC,eAArB,QAA4C,eAA5C;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;EAAA,gBACDL,QAAQ,CAAC;IACnCM,GAAG,EAAE;MAAEC,CAAC,EAAE,CAAL;MAAQC,CAAC,EAAE;IAAX,CAD8B;IAEnCC,SAAS,EAAEP,UAAU,CAAC,CAAD,CAAV,CAAcQ,KAFU;IAGnCC,QAAQ,EAAE;EAHyB,CAAD,CADP;EAAA;EAAA,IACtBC,MADsB;EAAA,IACdC,SADc;;EAO7B,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,OAAwB;IAAA,IAArBP,CAAqB,QAArBA,CAAqB;IAAA,IAAlBC,CAAkB,QAAlBA,CAAkB;IAAA,IAAfG,QAAe,QAAfA,QAAe;IAC9CE,SAAS,CAAC,UAAAE,IAAI;MAAA,yBACTA,IADS;QAEZT,GAAG,EAAE;UAAEC,CAAC,EAAGQ,IAAI,CAACT,GAAL,CAASC,CAAT,IAAcA,CAApB;UAAwBC,CAAC,EAAGO,IAAI,CAACT,GAAL,CAASE,CAAT,IAAcA;QAA1C,CAFO;QAGZG,QAAQ,EAARA;MAHY;IAAA,CAAL,CAAT;EAKD,CAND;;EAQA,IAAMK,WAAW,GAAGf,WAAW,CAAC,YAAM;IACpCY,SAAS,CAAC;MACRP,GAAG,EAAE;QAAEC,CAAC,EAAEH,WAAW,GAAG,CAAd,GAAkB,CAAvB;QAA0BI,CAAC,EAAE;MAA7B,CADG;MAERC,SAAS,EAAEN,eAAe,GAAGO,KAFrB;MAGRC,QAAQ,EAAE;IAHF,CAAD,CAAT;EAKD,CAN8B,EAM5B,EAN4B,CAA/B;EAQA,OAAO,CAACC,MAAD,EAASE,eAAT,EAA0BE,WAA1B,CAAP;AACD,CAxBM"},"metadata":{},"sourceType":"module"}