{"ast":null,"code":"import _slicedToArray from \"/Users/daniilssokolovs/react-tetris/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n//By using useEffect Hook, you tell React that your component needs to do something after render.\nimport { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\nexport var useStage = function useStage(player, resetPlayer) {\n  var _useState = useState(createStage()),\n      _useState2 = _slicedToArray(_useState, 2),\n      stage = _useState2[0],\n      setStage = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      rowsCleared = _useState4[0],\n      setRowsCleared = _useState4[1];\n\n  useEffect(function () {\n    setRowsCleared(0); //sweep the rows for tetris\n    //check if row containst any empty values (0) if yes it should not be cleared\n\n    var sweepRows = function sweepRows(newStage) {\n      return newStage.reduce(function (ack, row) {\n        if (row.findIndex(function (cell) {\n          return cell[0] === 0;\n        }) === -1) {\n          setRowsCleared(function (prev) {\n            return prev + 1;\n          });\n          ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n          return ack;\n        }\n\n        ack.push(row);\n        return ack;\n      }, []);\n    };\n\n    var updateStage = function updateStage(prevStage) {\n      //1st flush the stage. Check whether the tetromino has collided in the cell or not\n      var newStage = prevStage.map(function (row) {\n        return row.map(function (cell) {\n          return cell[1] === 'clear' ? [0, 'clear'] : cell;\n        });\n      }); //Then draw the tetromino\n\n      player.tetromino.forEach(function (row, y) {\n        row.forEach(function (value, x) {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [value, \"\".concat(player.collided ? 'merged' : 'clear')];\n          }\n        });\n      }); // Then check if we collided\n\n      if (player.collided) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n\n      return newStage;\n    };\n\n    setStage(function (prev) {\n      return updateStage(prev);\n    });\n  }, [player, resetPlayer]);\n  return [stage, setStage, rowsCleared];\n};","map":{"version":3,"names":["useState","useEffect","createStage","useStage","player","resetPlayer","stage","setStage","rowsCleared","setRowsCleared","sweepRows","newStage","reduce","ack","row","findIndex","cell","prev","unshift","Array","length","fill","push","updateStage","prevStage","map","tetromino","forEach","y","value","x","pos","collided"],"sources":["/Users/daniilssokolovs/react-tetris/src/hooks/useStage.js"],"sourcesContent":["//By using useEffect Hook, you tell React that your component needs to do something after render.\nimport { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\n\nexport const useStage = (player, resetPlayer) => {\n    const [stage, setStage] = useState(createStage());\n    const [rowsCleared, setRowsCleared] = useState(0);\n\n    useEffect(() => {\n        setRowsCleared(0);\n\n        //sweep the rows for tetris\n        //check if row containst any empty values (0) if yes it should not be cleared\n        const sweepRows = newStage =>\n            newStage.reduce((ack, row) => {\n                if (row.findIndex(cell => cell[0] === 0) === -1) {\n                    setRowsCleared(prev => prev + 1);\n                    ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n                    return ack;\n                }\n                ack.push(row);\n                return ack;\n            }, [])\n\n        const updateStage = prevStage => {\n            //1st flush the stage. Check whether the tetromino has collided in the cell or not\n            const newStage = prevStage.map(row =>\n                row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)),\n            );\n\n            //Then draw the tetromino\n            player.tetromino.forEach((row, y) => {\n                row.forEach((value, x) => {\n                    if(value !== 0) {\n                            newStage[y + player.pos.y][x + player.pos.x] = [\n                                value,\n                                `${player.collided ? 'merged' : 'clear'}`,\n                        ];\n                    }\n                });\n            });\n            // Then check if we collided\n            if (player.collided) {\n                resetPlayer();\n                return sweepRows(newStage);\n            }\n\n            return newStage;\n        };\n\n        setStage(prev => updateStage(prev));\n    }, [player, resetPlayer]);\n\n    return [stage, setStage, rowsCleared];\n};"],"mappings":";AAAA;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,MAAD,EAASC,WAAT,EAAyB;EAAA,gBACnBL,QAAQ,CAACE,WAAW,EAAZ,CADW;EAAA;EAAA,IACtCI,KADsC;EAAA,IAC/BC,QAD+B;;EAAA,iBAEPP,QAAQ,CAAC,CAAD,CAFD;EAAA;EAAA,IAEtCQ,WAFsC;EAAA,IAEzBC,cAFyB;;EAI7CR,SAAS,CAAC,YAAM;IACZQ,cAAc,CAAC,CAAD,CAAd,CADY,CAGZ;IACA;;IACA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,QAAQ;MAAA,OACtBA,QAAQ,CAACC,MAAT,CAAgB,UAACC,GAAD,EAAMC,GAAN,EAAc;QAC1B,IAAIA,GAAG,CAACC,SAAJ,CAAc,UAAAC,IAAI;UAAA,OAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,CAAhB;QAAA,CAAlB,MAAyC,CAAC,CAA9C,EAAiD;UAC7CP,cAAc,CAAC,UAAAQ,IAAI;YAAA,OAAIA,IAAI,GAAG,CAAX;UAAA,CAAL,CAAd;UACAJ,GAAG,CAACK,OAAJ,CAAY,IAAIC,KAAJ,CAAUR,QAAQ,CAAC,CAAD,CAAR,CAAYS,MAAtB,EAA8BC,IAA9B,CAAmC,CAAC,CAAD,EAAI,OAAJ,CAAnC,CAAZ;UACA,OAAOR,GAAP;QACH;;QACDA,GAAG,CAACS,IAAJ,CAASR,GAAT;QACA,OAAOD,GAAP;MACH,CARD,EAQG,EARH,CADsB;IAAA,CAA1B;;IAWA,IAAMU,WAAW,GAAG,SAAdA,WAAc,CAAAC,SAAS,EAAI;MAC7B;MACA,IAAMb,QAAQ,GAAGa,SAAS,CAACC,GAAV,CAAc,UAAAX,GAAG;QAAA,OAC9BA,GAAG,CAACW,GAAJ,CAAQ,UAAAT,IAAI;UAAA,OAAKA,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAZ,GAAsB,CAAC,CAAD,EAAI,OAAJ,CAAtB,GAAqCA,IAA1C;QAAA,CAAZ,CAD8B;MAAA,CAAjB,CAAjB,CAF6B,CAM7B;;MACAZ,MAAM,CAACsB,SAAP,CAAiBC,OAAjB,CAAyB,UAACb,GAAD,EAAMc,CAAN,EAAY;QACjCd,GAAG,CAACa,OAAJ,CAAY,UAACE,KAAD,EAAQC,CAAR,EAAc;UACtB,IAAGD,KAAK,KAAK,CAAb,EAAgB;YACRlB,QAAQ,CAACiB,CAAC,GAAGxB,MAAM,CAAC2B,GAAP,CAAWH,CAAhB,CAAR,CAA2BE,CAAC,GAAG1B,MAAM,CAAC2B,GAAP,CAAWD,CAA1C,IAA+C,CAC3CD,KAD2C,YAExCzB,MAAM,CAAC4B,QAAP,GAAkB,QAAlB,GAA6B,OAFW,EAA/C;UAIP;QACJ,CAPD;MAQH,CATD,EAP6B,CAiB7B;;MACA,IAAI5B,MAAM,CAAC4B,QAAX,EAAqB;QACjB3B,WAAW;QACX,OAAOK,SAAS,CAACC,QAAD,CAAhB;MACH;;MAED,OAAOA,QAAP;IACH,CAxBD;;IA0BAJ,QAAQ,CAAC,UAAAU,IAAI;MAAA,OAAIM,WAAW,CAACN,IAAD,CAAf;IAAA,CAAL,CAAR;EACH,CA3CQ,EA2CN,CAACb,MAAD,EAASC,WAAT,CA3CM,CAAT;EA6CA,OAAO,CAACC,KAAD,EAAQC,QAAR,EAAkBC,WAAlB,CAAP;AACH,CAlDM"},"metadata":{},"sourceType":"module"}