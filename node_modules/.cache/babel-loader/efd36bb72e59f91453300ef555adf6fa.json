{"ast":null,"code":"import _objectSpread from \"/Users/daniilssokolovs/react-tetris/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/daniilssokolovs/react-tetris/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useCallback } from 'react';\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { checkCollision, STAGE_WIDTH } from '../gameHelpers'; //Using ES6 structuring below code has been simplified to 1 line\n//without ES6\n//const playerState = useState();\n//const player = playerState[0]\n//const setPlayer = playerState[1]\n//with ES6\n//const [player, setPlayer] = useState();\n\nexport var usePlayer = function usePlayer() {\n  var _useState = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: TETROMINOS[0].shape,\n    collided: false\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      player = _useState2[0],\n      setPlayer = _useState2[1];\n\n  var rotate = function rotate(matrix, dir) {\n    // Transform rows to columns - transpose\n    var rotatedTetro = matrix.map(function (_, index) {\n      return matrix.map(function (col) {\n        return col[index];\n      });\n    }); //Reverse each row to get a rotated tetromino(matrix)\n\n    if (dir > 0) return rotatedTetro.map(function (row) {\n      return row.reverse();\n    });\n    return rotatedTetro.reverse();\n  };\n\n  var playerRotate = function playerRotate(stage, dir) {\n    //creating a complete clone of the player to do not work with player object in the state\n    var clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n    var pos = clonedPlayer.pos.x;\n    var offset = 1;\n\n    while (checkCollision(clonedPlayer, stage, {\n      x: 0,\n      y: 0\n    })) {\n      clonedPlayer.pos.x += offset;\n    }\n\n    setPlayer(clonedPlayer);\n  }; //spread previouse state\n\n\n  var updatePlayerPos = function updatePlayerPos(_ref) {\n    var x = _ref.x,\n        y = _ref.y,\n        collided = _ref.collided;\n    setPlayer(function (prev) {\n      return _objectSpread({}, prev, {\n        pos: {\n          x: prev.pos.x += x,\n          y: prev.pos.y += y\n        },\n        collided: collided\n      });\n    });\n  }; //call random tetromino\n\n\n  var resetPlayer = useCallback(function () {\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: randomTetromino().shape,\n      collided: false\n    });\n  }, []);\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n};","map":{"version":3,"names":["useState","useCallback","TETROMINOS","randomTetromino","checkCollision","STAGE_WIDTH","usePlayer","pos","x","y","tetromino","shape","collided","player","setPlayer","rotate","matrix","dir","rotatedTetro","map","_","index","col","row","reverse","playerRotate","stage","clonedPlayer","JSON","parse","stringify","offset","updatePlayerPos","prev","resetPlayer"],"sources":["/Users/daniilssokolovs/react-tetris/src/hooks/usePlayer.js"],"sourcesContent":["import { useState, useCallback } from 'react';\n\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { checkCollision, STAGE_WIDTH } from '../gameHelpers';\n\n\n//Using ES6 structuring below code has been simplified to 1 line\n    //without ES6\n    //const playerState = useState();\n    //const player = playerState[0]\n    //const setPlayer = playerState[1]\n    //with ES6\n    //const [player, setPlayer] = useState();\n\nexport const usePlayer = () => {\n    const [player, setPlayer] = useState({\n        pos: {x: 0, y: 0},\n        tetromino: TETROMINOS[0].shape,\n        collided: false,\n    });\n\n    const rotate = (matrix, dir) => {\n        // Transform rows to columns - transpose\n        const rotatedTetro = matrix.map((_, index) => \n            matrix.map(col => col[index]),\n        );\n        //Reverse each row to get a rotated tetromino(matrix)\n        if(dir > 0) return rotatedTetro.map(row => row.reverse());\n        return rotatedTetro.reverse();\n    };\n\n    const playerRotate = (stage, dir) => {\n        //creating a complete clone of the player to do not work with player object in the state\n        const clonedPlayer = JSON.parse(JSON.stringify(player));\n        clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n\n        const pos = clonedPlayer.pos.x;\n        let offset = 1;\n        while(checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\n            clonedPlayer.pos.x += offset;\n        }\n\n        setPlayer(clonedPlayer);\n    };\n\n    //spread previouse state\n    const updatePlayerPos = ({ x, y, collided }) => {\n        setPlayer(prev => ({\n            ...prev,\n            pos: { x: (prev.pos.x += x), y: (prev.pos.y += y)},\n            collided,\n        }))\n    }\n\n    //call random tetromino\n    const resetPlayer = useCallback(() => {\n        setPlayer({\n            pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n            tetromino: randomTetromino().shape,\n            collided: false,\n        })\n    }, [])\n\n    return [player, updatePlayerPos, resetPlayer, playerRotate];\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}